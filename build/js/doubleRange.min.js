(function(){const a=("content"in document.createElement("template")),b=a?function(a){const b=document.createElement("template");return b.innerHTML=a,b.content.firstElementChild}:function(a){const b=document.createElement("div");return b.innerHTML=a,b.firstElementChild},c=function(a={}){const{contClass:b,min:c,max:d,step:e,valueMin:f,valueMax:g,nameMin:h,nameMax:i}=a;return`
<div class="double-range ${b}">
							<h3 class="font-bold">Стоимость</h3>
		<span
			class="double-range__track"
		></span>
	
		<label class="double-range__label" aria-label="Стоимость от">
			<input
				class="
					double-range__input
					double-range__input--from"
				type="range"
				min="${c}"
				max="${d}"
				step="${e}"
				value="${f}"
				name="${h}"
				data-key="from"
			>
			<span
				class="
					double-range__thumb
					double-range__thumb--from"
				data-key="from"
			></span>
		</label>

		<label class="double-range__label" aria-label="Стоимость до">
			<input
				class="
					double-range__input
					double-range__input--to"
				type="range"
				min="${c}"
				max="${d}"
				step="${e}"
				value="${g}"
				name="${i}"
				data-key="to"
			>
			<span
				class="
					double-range__thumb
					double-range__thumb--to"
				data-key="to"
			></span>
		</label>
					<span class="cost">от <span class="double-range__output double-range__output--from">0</span></span>
							<span>до <span class="double-range__output double-range__output--to">5000</span></span>
</div>
`}({contClass:"price",min:0,max:1e4,step:100,valueMin:0,valueMax:5e3,nameMin:"minPrice",nameMax:"maxPrice"});class d{constructor(a){this.render(a),this.thumbs={from:this.elem.querySelector(".double-range__thumb--from"),to:this.elem.querySelector(".double-range__thumb--to")},this.inputs={from:this.elem.querySelector(".double-range__input--from"),to:this.elem.querySelector(".double-range__input--to")},this.values={from:this.elem.querySelector(".double-range__output--from"),to:this.elem.querySelector(".double-range__output--to")},this.indicator={track:this.elem.querySelector(".double-range__track"),startFill:0,endFill:0},this.eventNames={pointerdown:"pointerdown",pointerup:"pointerup",pointermove:"pointermove"},window.PointerEvent||(this.eventNames.pointerdown="mousedown",this.eventNames.pointerup="mouseup",this.eventNames.pointermove="mousemove"),this.currentKey=null,this.shift=null,this.thumbsWidth=null,this.maxValue=this.inputs.to.max,this.form=this.elem.closest("form"),this.setThumbPosition=this.setThumbPosition.bind(this),this.pointerDown=this.pointerDown.bind(this),this.moveThumb=this.moveThumb.bind(this),this.stopDrag=this.stopDrag.bind(this),this.init()}get rightEdge(){return this.elem.offsetWidth-this.thumbsWidth}render(a){this.elem=b(c),a.replaceWith(this.elem)}init(){this.thumbsWidth=this.thumbs.from.offsetWidth,this.addEvents(),this.setThumbPosition()}setThumbPosition(a={}){const{inputKey:b}=a;for(const c in this.thumbs){if(!!b&&b!==c)continue;const a=this.inputs[c],d=+a.value,e=this.thumbs[c],f=this.values[c];if("from"==c){const b=this.inputs.to,c=+b.value;d>=c&&(a.value=c-+a.step)}else{const b=this.inputs.from,c=+b.value;d<=c&&(a.value=c+ +a.step)}const g=a.value||a.defaultValue;let h=g/this.maxValue*this.rightEdge;h=h.toFixed()+"px",e.style.left=h,f.style.left=h,f.innerHTML=g,"from"==c?this.indicator.startFill=h:this.indicator.endFill=h}this.indicator.track.style.backgroundImage=`linear-gradient(90deg, transparent ${this.indicator.startFill},
		 currentColor ${this.indicator.startFill} ${this.indicator.endFill}, transparent ${this.indicator.endFill})`}addEvents(){for(const a in this.inputs){const b=this.inputs[a],c=this.thumbs[a];c.ondragstart=()=>!1,b.addEventListener("input",()=>{this.setThumbPosition({inputKey:a})})}this.elem.addEventListener(this.eventNames.pointerdown,this.pointerDown),window.addEventListener("resize",this.setThumbPosition),this.form.addEventListener("reset",()=>{setTimeout(this.setThumbPosition)})}pointerDown(a){const b=a.target.dataset.key;if(b){a.preventDefault();const c=this.thumbs[b];this.currentKey=b,c.setPointerCapture(a.pointerId),this.shift=a.clientX-c.offsetLeft,this.elem.addEventListener(this.eventNames.pointermove,this.moveThumb),this.elem.addEventListener(this.eventNames.pointerup,this.stopDrag)}}moveThumb(a){const b=a.clientX-this.shift,c=this.currentKey,d=b/this.rightEdge*this.maxValue;this.inputs[c].value=d,this.inputs[c].focus(),this.inputs[c].dispatchEvent(new Event("input"))}stopDrag(){this.elem.removeEventListener(this.eventNames.pointermove,this.moveThumb),this.elem.removeEventListener(this.eventNames.pointerup,this.stopDrag)}}const e=document.querySelector(".double-range");e instanceof HTMLElement&&new d(e)})();